export declare const FileType: {
    readonly UTF8: "utf8";
    readonly URL: "url";
    readonly Base64: "base64";
};
export type FileType = (typeof FileType)[keyof typeof FileType];
export type CodeFile = {
    name: string;
    content: string;
    type: FileType;
};
export type PrepareCommand = {
    imageName: string;
    interactive: boolean;
    cacheDirs: string[];
    username?: string;
    baseDir?: string;
};
export type SimpleRunCommand = {
    id: string;
    imageName: string;
    workingDir: string;
    shellCmd: string;
    attachVolume: boolean;
    files: CodeFile[];
    envVars: Record<string, string>;
    tarballUrls: string[];
    memoryBytes?: number;
};
export type EnvVarsCommand = {
    envVars: Record<string, string>;
};
export type StdOutData = {
    id: string;
    l: string;
};
export type StdErrData = {
    id: string;
    l: string;
};
export type CommandDoneData = {
    id: string;
    reason: string;
    exitCode: number;
};
type Msg<E extends string, D> = {
    e: E;
    data: D;
};
export type OrcaMsg = Msg<"prepare", PrepareCommand> | Msg<"simple_run", SimpleRunCommand> | Msg<"env_vars", EnvVarsCommand> | Msg<"env_vars_done", void> | Msg<"stdout", StdOutData> | Msg<"stderr", StdErrData> | Msg<"cmd_done", CommandDoneData>;
export type LineHandler = {
    handleLine(line: string): void;
};
export declare function convertToCodeFile(fileName: string, fileContent: string): CodeFile;
export {};
