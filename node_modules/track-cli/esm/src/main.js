#!/usr/bin/env node
import "../_dnt.polyfills.js";
import * as dntShim from "../_dnt.shims.js";
import { clone as cloneAction } from "./action/clone.js";
import { run as runAction } from "./action/run.js";
import { lang as langAction } from "./action/lang.js";
import { reset as resetAction } from "./action/reset.js";
import { pull as pullAction } from "./action/pull.js";
import { add as addAction } from "./action/add.js";
import { remove as removeAction } from "./action/remove.js";
import { status as statusAction } from "./action/status.js";
import { checkUpdates, DESCRIPTION, VERSION } from "./meta.js";
import { TrackError } from "./shared/errors.js";
import { red } from "../deps/deno.land/std@0.195.0/fmt/colors.js";
import { Command } from "../deps/deno.land/x/cliffy@v0.25.7/command/mod.js";
(async () => {
    const cloneCommand = new Command()
        .description("Clone challenge result from tracks.run")
        .arguments("<url:string> [target_dir:string]")
        .option("--basic-auth-user <user:string>", "The basic auth username if this server requires Basic Authentication")
        .option("--basic-auth-password <password:string>", "The basic auth password if this server requires Basic Authentication (leave blank to type in manually)")
        .action(async ({ basicAuthUser, basicAuthPassword }, ...[url, targetDir]) => {
        await cloneAction(url, {
            targetDir,
            basicAuthUser,
            basicAuthPassword,
        });
    });
    const runCommand = new Command()
        .description("Save and run the challenge on the remote code execution server.")
        .option("--no-save", "If this flag is specified, your files will not be uploaded to track after running the challenge tests.")
        .action(async ({ save }) => {
        await runAction({ noSave: !save });
    });
    const langCommand = new Command()
        .description("Change the programming language used for this challenge.")
        .action(async () => {
        await langAction();
    });
    const resetCommand = new Command()
        .description("Reset the challenge files back to their starting point and archive your current challenge files.")
        .action(async () => {
        await resetAction();
    });
    const pullCommand = new Command()
        .description("Pull your most recent changes into this directory (caution: overwrites existing files).")
        .action(async () => {
        await pullAction();
    });
    const addCommand = new Command()
        .description("Add a file to be included in your challenge submission.")
        .arguments("<file_paths...:string>")
        .action(async (_, ...filePaths) => {
        await addAction(filePaths);
    });
    const removeCommand = new Command()
        .description("Remove files from your challenge submission.")
        .arguments("<file_paths...:string>")
        .option("-r --recursive", "Allow recursive removal when a directory is given")
        .action(async ({ recursive }, ...filePaths) => {
        await removeAction(filePaths, { recursive });
    });
    const statusCommand = new Command()
        .description("Display the current status for this challenge.")
        .action(async () => {
        await statusAction();
    });
    if (!await checkUpdates()) {
        dntShim.Deno.exit(1);
    }
    await new Command()
        .name("track")
        .description(DESCRIPTION)
        .version(`v${VERSION}`)
        .action(function () {
        this.showHelp();
    })
        .command("clone", cloneCommand)
        .command("run", runCommand)
        .command("lang", langCommand)
        .command("reset", resetCommand)
        .command("pull", pullCommand)
        .command("add", addCommand)
        .command("rm", removeCommand)
        .command("status", statusCommand)
        .parse(dntShim.Deno.args);
    dntShim.Deno.exit(0);
})().catch((err) => {
    if (err instanceof TrackError) {
        console.error(`${red("[ERROR]")} ${err.message}`);
        dntShim.Deno.exit(1);
    }
    else {
        throw err;
    }
});
