import * as dntShim from "../../_dnt.shims.js";
import { CONFIG_FILE_PATH, load as loadConfig } from "../shared/config.js";
import { CantReadFile, NewFilesNotAllowed } from "../shared/errors.js";
import { pathsToFilenameSet, toNativeStyle } from "../shared/file.js";
import { getCommonChallengeContext, listFileNames, printWorkingFileSet, trackClientFromConfig, } from "../shared/mod.js";
import { FileListType } from "../shared/types.js";
import * as colors from "../../deps/deno.land/std@0.195.0/fmt/colors.js";
export async function add(filePaths) {
    const config = await loadConfig();
    const api = trackClientFromConfig(config);
    const [codingContext, _challenge] = await getCommonChallengeContext(config, api);
    if (!codingContext.settings.allowNewFile) {
        throw new NewFilesNotAllowed();
    }
    const requestedPaths = await pathsToFilenameSet(filePaths, {
        recursive: true,
        allowNonExistent: false,
    });
    const existingPaths = new Set(listFileNames(codingContext, FileListType.All));
    // Don't allow the config file to be added
    existingPaths.add(CONFIG_FILE_PATH);
    const pathsToAdd = Array.from(requestedPaths).filter((p) => !existingPaths.has(p));
    const addedFiles = listFileNames(codingContext, FileListType.UserAddedFiles)
        .concat(pathsToAdd);
    const updatedFiles = {};
    const decoder = new TextDecoder("utf-8");
    for (const path of pathsToAdd) {
        try {
            updatedFiles[path] = decoder.decode(await dntShim.Deno.readFile(path));
        }
        catch (_e) {
            throw new CantReadFile(path);
        }
    }
    if (pathsToAdd.length > 0) {
        const saveFilesRequest = {
            versionId: codingContext.challengeVersionId,
            addedFiles,
            updatedFiles,
        };
        const updatedDisplayFiles = Object.keys(updatedFiles);
        updatedDisplayFiles.sort();
        console.log(colors.green("Uploading:"));
        for (const path of updatedDisplayFiles) {
            console.log(`\t${toNativeStyle(path)}`);
        }
        console.log();
        await api.saveFiles(saveFilesRequest);
        const newCodingContext = await api.context();
        printWorkingFileSet(newCodingContext);
    }
    else {
        console.log("No files to add.");
        console.log();
        printWorkingFileSet(codingContext);
    }
}
