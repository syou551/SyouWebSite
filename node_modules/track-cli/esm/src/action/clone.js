import * as dntShim from "../../_dnt.shims.js";
import * as config from "../shared/config.js";
import { LocalCodingNotAllowed, OtherError } from "../shared/errors.js";
import { downloadChallengeFilesTo, printTimeLeft, tryStartingChallenge, } from "../shared/mod.js";
import { CloneUrl, TrackApp } from "../shared/types.js";
import { TestClient } from "../track/test.js";
import { TrainingClient } from "../track/training.js";
import { exists } from "../../deps/deno.land/std@0.195.0/fs/mod.js";
export async function clone(url, options) {
    // console.log(`url: ${url}`);
    // console.log(`target_dir: ${targetDir}`);
    // console.log(`basicAuthUser: ${basicAuthUser}`);
    // console.log(`basicAuthPassword: ${basicAuthPassword}`);
    const cloneUrl = new CloneUrl(url);
    const basicAuth = options?.basicAuthUser
        ? {
            username: options?.basicAuthUser,
            password: options?.basicAuthPassword,
        }
        : undefined;
    let api;
    switch (cloneUrl.app) {
        case TrackApp.Test:
            api = new TestClient(cloneUrl.baseUrl, cloneUrl.orgName, cloneUrl.token, cloneUrl.id, basicAuth);
            break;
        case TrackApp.Training:
            api = new TrainingClient(cloneUrl.baseUrl, cloneUrl.orgName, cloneUrl.token, cloneUrl.id, 0, 0, basicAuth);
            break;
    }
    await api.authenticate();
    const challenge = await api.startChallengeSession();
    if (!challenge.localCodingAllowed) {
        const webUrl = cloneUrl.toString(); // TODO: Test の場合は clone URL がそのまま受験画面だったけど、Training の場合は?
        throw new LocalCodingNotAllowed(webUrl);
    }
    // Determine challenge directory
    const challengeDir = await createChallengeDir(options?.targetDir ||
        `${cloneUrl.orgName}-challenge-${challenge.challengeId}`);
    const result = await tryStartingChallenge(api, challenge);
    if (!result) {
        throw new OtherError("Expected to have a challenge result after preparing and starting");
    }
    const timeLeft = await api.timeLeft();
    printTimeLeft(timeLeft);
    const codingContext = await api.context();
    await dntShim.Deno.mkdir(challengeDir, { recursive: true });
    const showFileDiff = false;
    const includeTarball = true;
    await downloadChallengeFilesTo(codingContext, challengeDir, api, showFileDiff, includeTarball);
    const trackConfig = Object.assign(api.config(), {
        app: cloneUrl.app,
        baseUrl: cloneUrl.baseUrl,
        orgName: cloneUrl.orgName,
        basicAuth: basicAuth,
        token: cloneUrl.token,
        cookies: api.getCookies(),
        programmingLanguage: result.programmingLanguage,
    });
    await config.save(trackConfig, {
        path: `${challengeDir}/.track/config.json`,
    });
    console.log();
    console.log(`Challenge downloaded to ${challengeDir}`);
    console.log(`Run 'cd ${challengeDir} && track status' to begin!`);
}
async function createChallengeDir(base) {
    let i = 1;
    while (true) {
        const challengeDir = i == 1 ? base : `${base}-${i}`;
        const pathExists = await exists(challengeDir);
        if (pathExists) {
            i++;
            continue;
        }
        await dntShim.Deno.mkdir(challengeDir, { recursive: true });
        return challengeDir;
    }
}
