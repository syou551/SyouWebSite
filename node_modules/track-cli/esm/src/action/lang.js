import * as dntShim from "../../_dnt.shims.js";
import { load as loadConfig, save as saveConfig, } from "../shared/config.js";
import { CantChooseLanguage } from "../shared/errors.js";
import { archiveExistingChallengeFiles, chooseProgrammingLanguage, downloadChallengeFilesTo, getCommonChallengeContext, trackClientFromConfig, } from "../shared/mod.js";
export async function lang() {
    const config = await loadConfig();
    const api = trackClientFromConfig(config);
    const [codingContext, challenge] = await getCommonChallengeContext(config, api);
    if (challenge.programmingLanguages.length === 0) {
        throw new CantChooseLanguage();
    }
    const availableLanguages = (await api.languages())
        .filter((pl) => codingContext.programmingLanguages.find((n) => n === pl.value));
    console.log("Your existing code will be archived in this directory and the original challenge code for the new language will be downloaded");
    const shouldContinue = dntShim.confirm("Are you sure you want to continue?");
    if (!shouldContinue) {
        return;
    }
    const desiredLanguage = await chooseProgrammingLanguage(availableLanguages);
    if (desiredLanguage.value === codingContext.selectedLanguage) {
        console.log("You are already using this language");
        return;
    }
    await api.updateLanguage(desiredLanguage.value);
    const currentDir = dntShim.Deno.cwd();
    await archiveExistingChallengeFiles(config.orgName);
    const newCodingContext = await api.context();
    const showFileDiff = false;
    const includeTarball = true;
    await downloadChallengeFilesTo(newCodingContext, currentDir, api, showFileDiff, includeTarball);
    const updatedConfig = Object.assign({}, config, {
        programmingLanguage: desiredLanguage.value,
    });
    await saveConfig(updatedConfig);
}
