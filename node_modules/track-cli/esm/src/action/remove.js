import * as dntShim from "../../_dnt.shims.js";
import { load as loadConfig } from "../shared/config.js";
import { DeleteFilesNotAllowed, OtherError } from "../shared/errors.js";
import { isEmptyDirectory, pathsToFilenameSet, toNativeStyle, } from "../shared/file.js";
import { getCommonChallengeContext, listFileNames, printWorkingFileSet, trackClientFromConfig, } from "../shared/mod.js";
import { FileListType } from "../shared/types.js";
import * as colors from "../../deps/deno.land/std@0.195.0/fmt/colors.js";
import { exists } from "../../deps/deno.land/std@0.195.0/fs/mod.js";
export async function remove(filePaths, options) {
    const config = await loadConfig();
    const api = trackClientFromConfig(config);
    const [codingContext, _challenge] = await getCommonChallengeContext(config, api);
    if (!codingContext.settings.allowNewFile) {
        throw new DeleteFilesNotAllowed();
    }
    const requestedPathsToDelete = await pathsToFilenameSet(filePaths, {
        recursive: options?.recursive,
        allowNonExistent: true,
    });
    const filesToDelete = [];
    const filesToKeep = [];
    for (const path of listFileNames(codingContext, FileListType.UserAddedFiles)) {
        if (requestedPathsToDelete.has(path)) {
            filesToDelete.push(path);
        }
        else {
            filesToKeep.push(path);
        }
    }
    if (filesToDelete.length > 0) {
        console.log(colors.green("Deleting:"));
        for (const file of filesToDelete) {
            console.log(`\t${toNativeStyle(file)}`);
        }
        console.log();
        const saveFilesRequest = {
            versionId: codingContext.challengeVersionId,
            addedFiles: filesToKeep,
            updatedFiles: {},
        };
        await api.saveFiles(saveFilesRequest);
        await Promise.all(filesToDelete.map((file) => exists(file).then((e) => e ? dntShim.Deno.remove(file) : Promise.resolve())))
            .catch((e) => Promise.reject(new OtherError(`An error occurred while deleting files: ${e}`)));
        // For each file to delete, walk the file's parents and delete directories
        // if they are empty, stopping at the first non-empty one.
        for (const file of filesToDelete) {
            let current = file;
            const re = /\/[^/]+$/;
            while (true) {
                const parent = current.replace(re, "");
                if (parent === current || parent === "." || parent === "/" ||
                    parent === "") {
                    break;
                }
                if (await isEmptyDirectory(parent)) {
                    await dntShim.Deno.remove(parent);
                }
                current = parent;
            }
        }
        const newCodingContext = await api.context();
        printWorkingFileSet(newCodingContext);
    }
    else {
        console.log("No files to delete.");
        console.log(colors.red("Use --recursive or -r to delete directories"));
        console.log();
        printWorkingFileSet(codingContext);
    }
}
