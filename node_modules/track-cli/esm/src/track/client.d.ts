import * as dntShim from "../../_dnt.shims.js";
import { TrackTestConfigPart, TrackTrainingConfigPart } from "../shared/config.js";
import { ChallengeResult, ChallengeSession, CodingContext, ProgrammingLanguage, ProgrammingLanguageInfo, SaveFilesRequest } from "../shared/types.js";
import { CookieJar } from "node-fetch-cookies";
import { ProxyAgent } from "proxy-agent";
export interface BasicAuth {
    username: string;
    password?: string;
}
export interface ApiResponse<T> {
    code: number;
    message?: string[];
    result?: T;
}
export declare const FormType: {
    URLEncoded: string;
    JSON: string;
};
export type FormType = typeof FormType[keyof typeof FormType];
export declare abstract class TrackClientBase {
    protected baseUrl: string;
    protected headers: Record<string, string>;
    protected cookies: CookieJar;
    protected agent: ProxyAgent;
    private isUnauthorized;
    abstract authenticate(): Promise<void>;
    constructor(baseUrl: string, basic?: BasicAuth, cookies?: Record<string, string>, isUnauthorized?: (res: dntShim.Response) => boolean);
    protected _get<T>(path: string, asText?: boolean): Promise<T>;
    protected _post<T, F>(path: string, formType: FormType, body: F): Promise<T>;
    protected _put<T, F>(path: string, formType: FormType, body: F): Promise<T>;
    private _result;
    getCookies(): {
        [name: string]: string;
    };
}
export interface TrackClient {
    config(): TrackTestConfigPart | TrackTrainingConfigPart;
    authenticate(): Promise<void>;
    getCookies(): {
        [name: string]: string;
    };
    startChallengeSession(): Promise<ChallengeSession>;
    languages(): Promise<ProgrammingLanguageInfo[]>;
    start(): Promise<ChallengeResult>;
    prepare(): Promise<ChallengeResult>;
    updateLanguage(language: ProgrammingLanguage): Promise<void>;
    timeLeft(): Promise<number>;
    context(): Promise<CodingContext>;
    presigned(files: string[]): Promise<{
        [name: string]: string;
    }>;
    orcaHost(): Promise<string>;
    orcaToken(context: CodingContext): Promise<string>;
    saveFiles(files: SaveFilesRequest): Promise<void>;
    updateEditorScore(score: number): Promise<void>;
    reset(): Promise<void>;
}
