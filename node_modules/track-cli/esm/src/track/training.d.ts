import { TrackTrainingConfigPart } from "../shared/config.js";
import { ChallengeResult, ChallengeSession, CodingContext, ProgrammingLanguage, ProgrammingLanguageInfo, SaveFilesRequest } from "../shared/types.js";
import { BasicAuth, TrackClient, TrackClientBase } from "./client.js";
export declare class TrainingClient extends TrackClientBase implements TrackClient {
    private orgName;
    private token;
    private courseMaterialId;
    private klassId;
    private klassResultId;
    constructor(baseUrl: string, orgName: string, token: string, courseMaterialId: number, klassId: number, klassResultId: number, basic?: BasicAuth, cookies?: Record<string, string>);
    config(): TrackTrainingConfigPart;
    authenticate(): Promise<void>;
    startChallengeSession(): Promise<ChallengeSession>;
    continueChallengeSession(): Promise<ChallengeSession>;
    languages(): Promise<ProgrammingLanguageInfo[]>;
    start(): Promise<ChallengeResult>;
    prepare(): Promise<ChallengeResult>;
    updateLanguage(language: ProgrammingLanguage): Promise<void>;
    timeLeft(): Promise<number>;
    context(): Promise<CodingContext>;
    presigned(files: string[]): Promise<{
        [name: string]: string;
    }>;
    orcaHost(): Promise<string>;
    orcaToken(context: CodingContext): Promise<string>;
    saveFiles(files: SaveFilesRequest): Promise<void>;
    updateEditorScore(score: number): Promise<void>;
    reset(): Promise<void>;
}
