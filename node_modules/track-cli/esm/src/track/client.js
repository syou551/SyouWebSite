import { VERSION } from "../meta.js";
import { HttpStatus } from "../shared/mod.js";
import { APIError } from "../shared/errors.js";
// @ts-ignore: has no exported member
import { CookieJar, fetch } from "node-fetch-cookies";
import { ProxyAgent } from "proxy-agent";
export const FormType = {
    URLEncoded: "urlencoded",
    JSON: "json",
};
export class TrackClientBase {
    constructor(baseUrl, basic, cookies, isUnauthorized) {
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cookies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "agent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ProxyAgent()
        });
        Object.defineProperty(this, "isUnauthorized", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.baseUrl = baseUrl;
        this.headers = {
            "X-Requested-With": "codecheck",
            "User-Agent": `track-cli-${VERSION}`,
        };
        if (basic) {
            this.headers["Authorization"] = `Basic ${btoa(`${basic.username}:${basic.password}`)}`;
        }
        this.cookies = new CookieJar();
        if (cookies) {
            for (const [name, value] of Object.entries(cookies)) {
                this.cookies.addCookie(`${name}=${value}`, baseUrl);
            }
        }
        this.isUnauthorized = isUnauthorized ||
            ((res) => res.status === HttpStatus.Unauthorized);
    }
    async _get(path, asText = false) {
        const url = `${this.baseUrl}${path}`;
        const response1 = await fetch(this.cookies, url, {
            method: "GET",
            headers: this.headers,
            agent: this.agent,
            redirect: "manual",
        });
        if (!this.isUnauthorized(response1)) {
            return await this._result(response1, asText);
        }
        await this.authenticate();
        const response2 = await fetch(this.cookies, url, {
            method: "GET",
            headers: this.headers,
            agent: this.agent,
        });
        return await this._result(response2, asText);
    }
    async _post(path, formType, body) {
        const url = `${this.baseUrl}${path}`;
        const headers = Object.assign({}, this.headers);
        let bodyData;
        switch (formType) {
            case FormType.URLEncoded:
                bodyData = new URLSearchParams();
                for (const [key, value] of Object.entries(body)) {
                    bodyData.append(key, value);
                }
                break;
            case FormType.JSON:
                bodyData = JSON.stringify(body);
                headers["Content-Type"] = "application/json";
                break;
        }
        const response1 = await fetch(this.cookies, url, {
            method: "POST",
            headers: headers,
            body: bodyData,
            agent: this.agent,
            redirect: "manual",
        });
        if (!this.isUnauthorized(response1)) {
            return await this._result(response1);
        }
        await this.authenticate();
        const response2 = await fetch(this.cookies, url, {
            method: "POST",
            headers: headers,
            body: bodyData,
            agent: this.agent,
        });
        return await this._result(response2);
    }
    async _put(path, formType, body) {
        const url = `${this.baseUrl}${path}`;
        const headers = Object.assign({}, this.headers);
        let bodyData;
        switch (formType) {
            case FormType.URLEncoded:
                bodyData = new URLSearchParams();
                for (const [key, value] of Object.entries(body)) {
                    bodyData.append(key, value);
                }
                break;
            case FormType.JSON:
                bodyData = JSON.stringify(body);
                headers["Content-Type"] = "application/json";
                break;
        }
        const response1 = await fetch(this.cookies, url, {
            method: "PUT",
            headers: headers,
            body: bodyData,
            agent: this.agent,
            redirect: "manual",
        });
        if (!this.isUnauthorized(response1)) {
            return await this._result(response1);
        }
        await this.authenticate();
        const response2 = await fetch(this.cookies, url, {
            method: "PUT",
            headers: headers,
            body: bodyData,
            agent: this.agent,
        });
        return await this._result(response2);
    }
    async _result(response, asText = false) {
        if (HttpStatus.isSuccess(response)) {
            if (asText) {
                return (await response.text());
            }
            else {
                const json = await response.json();
                if (json.result) {
                    return json.result;
                }
                else {
                    throw APIError.serializationError(await response.text());
                }
            }
        }
        else {
            throw await APIError.fromResponse(response);
        }
    }
    getCookies() {
        const cookies = {};
        for (const cookie of this.cookies.cookiesAll()) {
            if (cookie.name && cookie.value) {
                cookies[cookie.name] = cookie.value;
            }
        }
        return cookies;
    }
}
