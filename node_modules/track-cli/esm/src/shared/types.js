export const TrackApp = {
    Test: 1,
    Training: 2,
};
const TRACK_TEST_URL_PATTERN = new RegExp("([^/]+)/exams/([^/]+)/challenges/(\\d+)");
const TRACK_TRAINING_URL_PATTERN = new RegExp("([^/]+)/train/([^/]+)/challenges/(\\d+)");
export class CloneUrl {
    constructor(url) {
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "orgName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const urlObj = new URL(url);
        const scheme = urlObj.protocol.slice(0, -1);
        const host = urlObj.host + (urlObj.port ? ":" + urlObj.port : "");
        this.baseUrl = `${scheme}://${host}`;
        let caps;
        if ((caps = TRACK_TEST_URL_PATTERN.exec(url))) {
            this.app = TrackApp.Test;
            this.orgName = caps[1];
            this.token = caps[2];
            this.id = parseInt(caps[3]);
        }
        else if ((caps = TRACK_TRAINING_URL_PATTERN.exec(url))) {
            this.app = TrackApp.Training;
            this.orgName = caps[1];
            this.token = caps[2];
            this.id = parseInt(caps[3]);
        }
        else {
            throw new Error(`Invalid URL: ${url}`);
        }
    }
    toString() {
        switch (this.app) {
            case TrackApp.Test:
                return `${this.baseUrl}/${this.orgName}/exams/${this.token}/challenges/${this.id}`;
            case TrackApp.Training:
                return `${this.baseUrl}/${this.orgName}/train/${this.token}/challenges/${this.id}`;
        }
    }
}
export const FileListType = {
    All: 0,
    ReadOnlyChallengeFiles: 1,
    EditableChallengeFiles: 2,
    UserAddedFiles: 3,
    Editable: 4,
};
export const EnvSettings = {
    default: {
        imageName: "givery/codecheck:latest",
        cacheDirs: [],
    },
};
export const ChallengeStyle = {
    Quiz: 1,
    Development: 2,
    Algorithm: 3,
    Ai: 4,
};
export const ChallengeResultStatus = {
    Prepared: 0,
    Started: 1,
    InProgress: 2,
    Finished: 3,
    NotModified: 4,
    CanRestart: 5,
    ScoringWaiting: 6,
};
export const SpokenLanguage = {
    English: "en",
    Japanese: "ja",
};
