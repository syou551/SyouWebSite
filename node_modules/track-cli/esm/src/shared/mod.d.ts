/// <reference types="node" />
import * as dntShim from "../../_dnt.shims.js";
import { TrackConfig } from "./config.js";
import { ChallengeResult, ChallengeSession, ChallengeSettings, CodingAnswers, CodingContext, FileListType, ProgrammingLanguageInfo } from "./types.js";
import { TrackClient } from "../track/client.js";
export declare const _internals: {
    prompt: typeof dntShim.prompt;
    scoreRatio: typeof scoreRatio;
};
export declare const HttpStatus: {
    readonly OK: 200;
    readonly Unauthorized: 401;
    readonly isSuccess: (r: number | dntShim.Response) => boolean;
    readonly isRedirect: (r: number | dntShim.Response) => boolean;
    readonly isClientError: (r: number | dntShim.Response) => boolean;
    readonly isServerError: (r: number | dntShim.Response) => boolean;
};
export declare const Prompt: {
    select(message: string, items: string[]): number | undefined;
};
export declare function printTimeLeft(timeLeftSeconds: number): void;
export declare function tryStartingChallenge(api: TrackClient, challenge: ChallengeSession): Promise<ChallengeResult | undefined>;
export declare function chooseProgrammingLanguage(languages: ProgrammingLanguageInfo[]): ProgrammingLanguageInfo;
export declare function listFileNames(context: {
    settings: ChallengeSettings;
    answers: CodingAnswers;
}, fileListType: FileListType): string[];
export declare const SnakeCase: {
    to<T>(obj: T): T;
    from<T_1>(obj: T_1): T_1;
};
export declare function getCommonChallengeContext(config: TrackConfig, api: TrackClient): Promise<[CodingContext, ChallengeSession]>;
declare function scoreRatio(editorScore: number | undefined, openTestcases: number | undefined): string;
export declare function printChallengeInfo(api: TrackClient, codingContext: CodingContext, challenge: ChallengeSession): Promise<void>;
export declare function printWorkingFileSet(codingContext: CodingContext): void;
export declare function downloadChallengeFilesTo(codingContext: CodingContext, dest: string, api: TrackClient, showFileDiff: boolean, includeTarball: boolean): Promise<void>;
export type ArchiveExistingChallengeFilesOptions = {
    challengeDir?: string;
    selectedLanguage?: ProgrammingLanguageInfo;
};
export declare function archiveExistingChallengeFiles(orgName: string): Promise<void>;
export declare function trackClientFromConfig(config: TrackConfig): TrackClient;
export {};
