export declare const TrackApp: {
    readonly Test: 1;
    readonly Training: 2;
};
export type TrackApp = typeof TrackApp[keyof typeof TrackApp];
export declare class CloneUrl {
    app: TrackApp;
    baseUrl: string;
    orgName: string;
    token: string;
    id: number;
    constructor(url: string);
    toString(): string;
}
export interface ProgrammingLanguageInfo {
    value: ProgrammingLanguage;
    name: string;
}
export interface ChallengeSession {
    challengeId: number;
    challengeVersionId: number;
    style: ChallengeStyle;
    title: string;
    description?: string;
    timeLimitMinutes?: number;
    displayOrder: number;
    programmingLanguages: ProgrammingLanguage[];
    localCodingAllowed: boolean;
    openTestcases?: number;
    result?: ChallengeResult;
}
export interface ChallengeResult {
    challengeId: number;
    challengeVersionId: number;
    dueDate?: string;
    storageId: string;
    status: ChallengeResultStatus;
    openedAt?: string;
    finishedAt?: string;
    totalTestcases?: number;
    successfulTestcases?: number;
    editorScore?: number;
    testOutput?: string;
    lastScoredAt?: string;
    programmingLanguage?: ProgrammingLanguage;
}
export interface CodingContext {
    challengeId: number;
    challengeVersionId: number;
    challengeResultId: number;
    title: string;
    urlForPresign: string;
    urlForOrcaToken?: string;
    methodForPresign: string;
    urlForSave?: string;
    tarballUrl: string;
    tarballUrls: string[];
    allowSave: boolean;
    allowEdit?: boolean;
    programmingLanguages: ProgrammingLanguage[];
    selectedLanguage?: ProgrammingLanguage;
    challengeLanguage: SpokenLanguage;
    settings: ChallengeSettings;
    answers: CodingAnswers;
    orcaHost?: string;
}
export declare const FileListType: {
    readonly All: 0;
    readonly ReadOnlyChallengeFiles: 1;
    readonly EditableChallengeFiles: 2;
    readonly UserAddedFiles: 3;
    readonly Editable: 4;
};
export type FileListType = (typeof FileListType)[keyof typeof FileListType];
export interface ChallengeSettings {
    files: FileTree;
    hiddenFiles: string[];
    testExcludes: string[];
    images: string[];
    build: string[];
    test: string;
    mainFile?: string;
    allowNewFile: boolean;
    languages: string[];
    sample?: string;
    envConfig?: EnvSettings;
    initialize: string[];
}
export type FileTree = {
    [key: string]: FileTree | boolean;
};
export interface EnvSettings {
    imageName: string;
    workingDir?: string;
    baseDir?: string;
    username?: string;
    variables?: Record<string, string>;
    cacheDirs: string[];
}
export declare const EnvSettings: {
    default: EnvSettings;
};
export interface TestCases {
    open: number;
    secret: number;
}
export interface CodingAnswers {
    build?: string[];
    appCommand?: string;
    mainFile?: string;
    addedFiles?: string[];
    fileVersions: object;
    envConfig?: EnvSettings;
}
export interface SaveFilesRequest {
    versionId: number;
    addedFiles: string[];
    updatedFiles: Record<string, string>;
}
export declare const ChallengeStyle: {
    readonly Quiz: 1;
    readonly Development: 2;
    readonly Algorithm: 3;
    readonly Ai: 4;
};
export type ChallengeStyle = (typeof ChallengeStyle)[keyof typeof ChallengeStyle];
export declare const ChallengeResultStatus: {
    readonly Prepared: 0;
    readonly Started: 1;
    readonly InProgress: 2;
    readonly Finished: 3;
    readonly NotModified: 4;
    readonly CanRestart: 5;
    readonly ScoringWaiting: 6;
};
export type ChallengeResultStatus = (typeof ChallengeResultStatus)[keyof typeof ChallengeResultStatus];
export declare const SpokenLanguage: {
    readonly English: "en";
    readonly Japanese: "ja";
};
export type SpokenLanguage = (typeof SpokenLanguage)[keyof typeof SpokenLanguage];
export type ProgrammingLanguage = number;
