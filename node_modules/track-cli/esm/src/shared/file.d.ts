import * as dntShim from "../../_dnt.shims.js";
export declare const _internals: {
    SEP: string;
};
export type PathsToFilenameSetOptions = {
    recursive?: boolean;
    allowNonExistent?: boolean;
    root?: string;
};
/**
 * Given a user-supplied Vec of file paths, this function will
 * iterate over each one, optionally verify it exists, and optionally recursively
 * add files in subdirectories if the supplied path is a directory
 * It will also transform the path to be relative to the working directory
 */
export declare function pathsToFilenameSet(paths: string[], options?: PathsToFilenameSetOptions): Promise<Set<string>>;
export declare function stat(p: string): Promise<dntShim.Deno.FileInfo | null>;
export declare function isEmptyDirectory(p: string): Promise<boolean>;
/**
 * Given a path, will return an array with all files and sub-files recursively.
 * If the given path is a file, just a Vec with the file will be returned.
 */
export declare function getAllDirFiles(p: string): Promise<string[]>;
export declare function toNixStyle(p: string): string;
export declare function toNativeStyle(p: string): string;
export declare function untgz(compressed: Uint8Array, dest: string): Promise<void>;
export type GetUniqueDirNameOptions = {
    root?: string;
};
export declare function getUniqueDirName(base: string, options?: GetUniqueDirNameOptions): Promise<string>;
