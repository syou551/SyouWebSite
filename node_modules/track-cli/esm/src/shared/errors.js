import { HttpStatus } from "./mod.js";
export class TrackError extends Error {
    constructor(message) {
        super(message);
        this.name = "TrackError";
    }
}
export class APIError extends TrackError {
    constructor(message) {
        super(message);
        this.name = "APIError";
    }
    static async fromResponse(res) {
        console.log(res.url);
        const body = await res.text();
        if (HttpStatus.isClientError(res)) {
            return new APIError(`A client error occurred (${res.status}): ${body}`);
        }
        else if (HttpStatus.isServerError(res)) {
            return new APIError(`A server error occurred (${res.status}): ${body}`);
        }
        else {
            return new APIError(`An unknown error occurred (${res.status}): ${body}`);
        }
    }
    static serializationError(body) {
        return new APIError(`A serialization error occurred: ${body}`);
    }
}
export class IOError extends TrackError {
    constructor(error) {
        super(`An unexpected IO error occurred: ${error}`);
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
        });
        this.name = "IOError";
    }
}
export class JSONError extends TrackError {
    constructor(error) {
        super(`Error with JSON (de)serialization: ${error}`);
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
        });
        this.name = "JSONError";
    }
}
export class WebsocketError extends TrackError {
    constructor(error) {
        super(`Websocket Error: ${error}`);
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
        });
        this.name = "WebsocketError";
    }
}
export class ChallengeDirectoryExists extends TrackError {
    constructor(path) {
        super(`The destination path '${path}' already exists and is not an empty directory`);
        Object.defineProperty(this, "path", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: path
        });
        this.name = "ChallengeDirectoryExists";
    }
}
export class ExamUnread extends TrackError {
    constructor(webUrl) {
        super(`This exam has not started yet, please start it in your browser at: ${webUrl}`);
        Object.defineProperty(this, "webUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: webUrl
        });
        this.name = "ExamUnread";
    }
}
export class ExamExpired extends TrackError {
    constructor() {
        super("This exam is no longer available because the deadline has expired");
        this.name = "ExamExpired";
    }
}
export class ExamCanceled extends TrackError {
    constructor() {
        super("This exam has been canceled");
        this.name = "ExamCanceled";
    }
}
export class ExamSubmitted extends TrackError {
    constructor() {
        super("This exam has already been submitted");
        this.name = "ExamSubmitted";
    }
}
export class MissingConfigFile extends TrackError {
    constructor() {
        super("Could not load track config file - are you in a track challenge directory?");
        this.name = "MissingConfigFile";
    }
}
export class ChallengeAlreadyFinished extends TrackError {
    constructor() {
        super("This challenge has already been finished");
        this.name = "ChallengeAlreadyFinished";
    }
}
export class InvalidChallengeId extends TrackError {
    constructor(challengeId) {
        super(`The challenge id specified in your URL (${challengeId}), is invalid`);
        Object.defineProperty(this, "challengeId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: challengeId
        });
        this.name = "InvalidChallengeId";
    }
}
export class CantChooseLanguage extends TrackError {
    constructor() {
        super("This challenge does not support changing programming languages");
        this.name = "CantChooseLanguage";
    }
}
export class NotASingleResponse extends TrackError {
    constructor() {
        super("Tried to extract a single result from an API response with no result");
        this.name = "NotASingleResponse";
    }
}
export class BadTarballURL extends TrackError {
    constructor(url, reason) {
        super(`The challenge tarball URL did not return a 200 response.\n\nReason = ${reason}\n\nURL = ${url}\n\nPlease try the command again`);
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: url
        });
        Object.defineProperty(this, "reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: reason
        });
        this.name = "BadTarballURL";
    }
}
// export class CantOpenFile extends TrackError {
//   constructor(public fileName: string) {
//     super(
//       `Could not open file - ${fileName}\n\nIf you changed your submission in the web editor, try running \`track pull\` to pull your latest changes.`,
//     );
//     this.name = "CantOpenFile";
//   }
// }
export class CantReadFile extends TrackError {
    constructor(fileName) {
        super(`Could not read file: ${fileName} - Please make sure it is saved with a UTF-8 encoding.`);
        Object.defineProperty(this, "fileName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fileName
        });
        this.name = "CantReadFile";
    }
}
export class FileNotFound extends TrackError {
    constructor(fileName) {
        super(`File not found: ${fileName} - If you deleted this file, run 'track rm' command.`);
        Object.defineProperty(this, "fileName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fileName
        });
        this.name = "FileNotFound";
    }
}
export class FileMissingOrOutsideDirectory extends TrackError {
    constructor(fileName) {
        super(`File missing or located outside of the challenge directory - ${fileName}`);
        Object.defineProperty(this, "fileName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fileName
        });
        this.name = "FileMissingOrOutsideDirectory";
    }
}
export class NewFilesNotAllowed extends TrackError {
    constructor() {
        super("This challenge does not allow the addition of new files");
        this.name = "NewFilesNotAllowed";
    }
}
export class DeleteFilesNotAllowed extends TrackError {
    constructor() {
        super("This challenge does not allow the deletion of files");
        this.name = "DeleteFilesNotAllowed";
    }
}
export class LocalCodingNotAllowed extends TrackError {
    constructor(url) {
        super(`You are not allowed to take this challenge in your local CLI.\nPlease continue your challenge on web:\n\n${url}`);
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: url
        });
        this.name = "LocalCodingNotAllowed";
    }
}
export class OtherError extends TrackError {
    constructor(message) {
        super(message);
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: message
        });
        this.name = "OtherError";
    }
}
